// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Size {
  XS
  S
  M
  L
  XL
  XXL
  XXXL
}
enum Gender {
  men
  women
  kid
  unisex
}

enum Role {
  admin
  user
}


model Category {
  id String @id @default(uuid())
  name String @unique 
  active Boolean @default(true)

  // RELACIONES
  // establecer la relacion con productos
  Product Product[]
}

model Product {
  id String @id @default(uuid())
  title String
  description String 
  inStock Int
  price Float @default(0)
  sizes Size[] @default([])
  slug String @unique
  tags String[] @default([])
  gender Gender
  active Boolean @default(true)

  // INDEX
  // creando index de gender
  @@index([gender])
  
  // RELACIONES
  //ESTABLECIENDO RELACION CON PRODUCT IMAGE 
  ProductImage ProductImage[]
    // ESTABLECIENDO LA RELACION CON CATEGORIAS
  category Category @relation(fields: [categoryId],references: [id])
  categoryId String

  orderItem OrderItem[]
}

model ProductImage {
  id Int @id @default(autoincrement())
  url String

// RELACIONES
  product Product @relation(fields: [productId],references: [id])
  productId String
  active Boolean @default(true)
}

model User {
  id String @id @default(uuid())
  name String
  email String @unique
  email_verified DateTime?
  password String 
  role Role @default(user)
  image String?
  active Boolean  @default(true)
  address UserAddress?
  orders Order[]
}

model Country {
  id String @id
  name String
  active Boolean @default(true)
  UserAddress UserAddress[]
  orderAddress OrderAddress[]

}

model UserAddress {
  id String @id @default(uuid())
  firstName String
  lastName String
  address String
  address2 String?
  postalCode String
  phone String
  city String

  // RELACIONES
  country Country @relation(fields: [countryId],references: [id ]) 
  countryId String

  user User @relation(fields: [userId],references: [id])
  userId String @unique
  active Boolean @default(true)
}
// ORDEN DE COMPRAS
model Order {
  id String @id @default(uuid())
  subTotal Float
  tax Float
  total Float
  itemsInOrder Int
  isPaid Boolean @default(false)
  active Boolean @default(true)
  paidAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  transactionId String?

    //relaciones
    user User @relation(fields: [userId],references: [id])
    userId String 

    orders OrderItem[]

    // PARA PODER DEFINIR LA RELACION UNO A UNO
    orderAddress OrderAddress?
    

} 


model OrderItem {
  id String @id @default(uuid())
  quantity Int
  price Float
  size Size
  order Order @relation(fields: [orderId],references: [id])
  orderId String
  product Product @relation(fields: [productId],references: [id])
  productId String 

}

model OrderAddress {
  id String @id @default(uuid())
  firstName String
  lastName String
  address String
  address2 String?
  postalCode String
  city String
  phone String
  active Boolean @default(true)

  
  country Country @relation(fields: [countryId],references: [id])
  countryId String

// RELACION UNO A UNO
  order Order @relation(fields: [orderId],references: [id])
  orderId String @unique
}